name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options: [patch, minor, major, prepatch, preminor, premajor, prerelease]
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'

jobs:
  # Quality Gates - Always run
  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm tsc --noEmit

      - name: Build
        run: pnpm build

      - name: Security audit
        run: pnpm audit --audit-level moderate

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/
          key: build-${{ github.sha }}

  # Create Release (manual trigger only)
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    outputs:
      tag_name: ${{ steps.version.outputs.TAG_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Calculate new version
        id: version
        run: |
          NEW_VERSION=$(npm version ${{ github.event.inputs.version }} --no-git-tag-version)
          echo "NEW_VERSION=${NEW_VERSION#v}" >> $GITHUB_OUTPUT
          echo "TAG_NAME=v${NEW_VERSION#v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG="ðŸŽ‰ **Initial Release**"
          else
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%an)" --no-merges | head -20)
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="- Minor updates and improvements"
            fi
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update package.json and create tag
        run: |
          git add package.json
          git commit -m "ðŸ”– Release v${{ steps.version.outputs.NEW_VERSION }}"
          git tag ${{ steps.version.outputs.TAG_NAME }}
          git push origin main
          git push origin ${{ steps.version.outputs.TAG_NAME }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.TAG_NAME }}
          release_name: Release ${{ steps.version.outputs.TAG_NAME }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          body: |
            ## ðŸš€ Release ${{ steps.version.outputs.TAG_NAME }}
            
            ### ðŸ“‹ Changes
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### ðŸ“¦ Installation
            ```bash
            npm install -g rafey-shell@${{ steps.version.outputs.NEW_VERSION }}
            ```

  # Publish (triggered by tags only)
  publish:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: quality
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for npm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/
          key: build-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Update package version to match tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          npm version $TAG_VERSION --no-git-tag-version

      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'

      - name: Update package.json for GitHub Packages
        run: |
          sed -i 's/"name": "rafey-shell"/"name": "@abdurmasood\/rafey-shell"/' package.json

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}